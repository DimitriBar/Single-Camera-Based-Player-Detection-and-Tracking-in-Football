start_time = time.time()

# define filepath
filepath = 'videos/condition1.mp4'

vidcap = cv2.VideoCapture(filepath)
if vidcap.isOpened():
  print("Video capture opened")
else:
  print("Failed to open VideoCapture")

ret, f = vidcap.read()

avg = np.float32(f)
fc = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
fc = int(fc)
kernel = np.ones((4,4), np.uint8)

# loop over images and estimate background 
for x in range(0, 1):
  
  ret, f = vidcap.read()
  if not ret:
    continue
  cv2.accumulateWeighted(f,avg,0.01)
  res = cv2.convertScaleAbs(avg)
  
  gray_frame = cv2.cvtColor(f, cv2.COLOR_BGR2GRAY)
  res_gray = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)
  difference = cv2.absdiff(res_gray, gray_frame)
  
  _, difference = cv2.threshold(difference, 25, 255, cv2.THRESH_BINARY)
  cv2_imshow(difference)
  
  close = cv2.morphologyEx(difference, cv2.MORPH_CLOSE, kernel)
  cv2_imshow(close)
  
  morphopen = cv2.morphologyEx(difference, cv2.MORPH_OPEN, kernel)
  cv2_imshow(morphopen)
    
  dilated = cv2.dilate(morphopen, None, iterations = 2)
  cv2_imshow(dilated)

  _, contours,_ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
  #cv2.drawContours(image, contours, -1, (0, 255, 0), 2)
  #cv2_imshow(image)
    
  font = cv2.FONT_HERSHEY_SIMPLEX

  for contour in contours:
    (x, y, w, h) = cv2.boundingRect(contour)
    if cv2.contourArea(contour) < 500:
        continue
    if cv2.contourArea(contour) > 10000:
        continue
    if h<w:
        continue
    cv2.rectangle(f, (x,y), (x+w,y+h), (0,0,255), 4)
      
  cv2_imshow(f)
  
  ret, f = vidcap.read()
  if not ret:
    continue
  avg = np.float32(f)
  
  if cv2.waitKey() == 27:
    break
    
cv2.destroyAllWindows()
vidcap.release()

print("--- %s seconds ---" % (time.time() - start_time))
